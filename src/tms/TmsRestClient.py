###################################################################
# (c) Copyright 2008 Wi-Fi Alliance.  All Rights Reserved
#
# Authors:
# Chandra Sekhar Duba;       Email: cduba@wi-fi.org
####################################################################
# LICENSE
####################################################################
#
#
# License is granted only to Wi-Fi Alliance members and is for use solely
# in testing Wi-Fi products. This license is not transferable or sublicensable,
# and it does not extend to and may not be used with non Wi-Fi applications.
#
# Commercial derivative works or applications that use the Wi-Fi
# scripts generated by this software are NOT AUTHORIZED without
# specific prior written permission from Wi-Fi Alliance
#
# Non-commercial derivative works for your own internal use are
# authorized and are limited by the same restrictions.
#
# Neither the name of the author nor "Wi-Fi Alliance"
# may be used to endorse or promote products that are derived
# from or that use this software without specific prior written
# permission from the author or Wi-Fi Alliance
#
# THIS SOFTWARE IS PROVIDED BY WI-FI ALLIANCE "AS IS" AND ANY
# EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT AND FITNESS
# FOR A  PARTICULAR PURPOSE, ARE DISCLAIMED. IN NO EVENT SHALL WI-FI
# ALLIANCE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# THE COST OF PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###################################################################
# Change History
#       Date        Version          Comment 
#            
#        
###################################################################
#

import socket
import os, sys
import urllib
import json
from urllib.error  import URLError, HTTPError
#import SSL
from tms.TmsHeaders import *
import tms.TmsCommon as TmsCommon


class MyRestClient:
    def __init__(self,_logobj):
        #logger object
        self.logobj = _logobj
        self.logobj.LogMsg("MyRestClient - Object Created",WFA_INFO)
        #Read the config file and configure the cloass propoerties
        #the TMS server IP address or domain name
        #the TMS server url

        #Read the config file and configure the eventname and password
          
          
    def TestServerLink(self):
        #this function checks the network link to the server
        self.logobj.LogMsg("Entry TestServerLink function",WFA_DEBUG)
        #ping the TMS server
        #print "The system command", "ping -n 1 " + TmsCommon.TmsServerHostName
        tmp_pingRes = os.system("ping -n 1 " + TmsCommon.TmsServerHostName)
        if tmp_pingRes == 0:
            #print "Ping responses ", tmp_pingRes
            self.logobj.LogMsg("Exit TestServerLink function",WFA_DEBUG)
            return True
        else:
            self.logobj.LogMsg("Exit TestServerLink function",WFA_DEBUG)
            return False

    def PostJsonFile(self,_JsonData):
        self.logobj.LogMsg("Entry PostJsonFile function",WFA_DEBUG)

        #use the eventname and password as part of the http header
        #prepare the URL from the configuration
        #url = 'http://jsonplaceholder.typicode.com/posts'

        #prepare the JSON data
        #postdata = {"chandra":"duba"}
        #data = json.dumps(postdata)
        try:
            data_tmp = json.loads(_JsonData)
            data = json.dumps(data_tmp)
            print("type of data is",  type(data))
            print("data is",  data)
            print("TmsCommon.TmsServerURL is",  TmsCommon.TmsServerURL)
        except: 
            print("Error in processing input JSON contents")
            sys.exit(1)
        #print the data 
        #print "Json data", data

        # create the Rest url object with the data which use post
        #req = urllib.Request(url,data)
        try:

            # req = urllib.Request(TmsCommon.TmsServerURL,data) # TED: We change as below since the  prototype of urlib module is changed within the Python 3.x
            req = urllib.request.Request(url=TmsCommon.TmsServerURL,data=data)   
        except:
            print(" Error in creating the HTTP Request")
            sys.exit(1)
        #Add the http custom headers 	
        #headers = {'Password': TmsCommon.TmsServerPS,'Event-Id': TmsCommon.TmsServerUN,'Content-Type':'application/json'}
        #print "The http header", headers
        req.add_header('Content-Type','application/json')
        req.add_header('Password',TmsCommon.TmsServerPS)
        req.add_header('Event-Id',TmsCommon.TmsServerUN)
        #req.add_header(headers)

        try:
            response = urllib.urlopen(req)
            #response = urllib.Request(req,data)
        except HTTPError as e:
            print('\n The server returned Error.')
            msg = 'Error code: ', e.code
            self.logobj.LogMsg(msg,WFA_DEBUG)
            msg = 'Error info: ', e.info()
            self.logobj.LogMsg(msg,WFA_DEBUG)
            server_response=e.read()
            msg = "The  HTTP POST JSON Response",server_response
            self.logobj.LogMsg(msg,WFA_DEBUG)

            json_resp=json.loads(server_response)
            print("TMS Server Response STATUS",json_resp["status"])    
            #print "TMS Server  Response CODE",json_resp['errors']
            error_list = json_resp['errors']
            for item in error_list:
                #print "TMS Server  Response Error CODE",item["code"]
                print("TMS Server  Response Error String:  ",item["errorString"])
            sys.exit(1)

        except URLError as tmp_err:
            print('Error in URL Open')
            print(tmp_err.code)
            print(tmp_err.reason)
            print(tmp_err.read())
            sys.exit(1)

        except:
            print("exception")
            print("Unexpected error:", sys.exc_info()[0])

        print("!!!! SUCCESSFUL Posting to Server !!!!")
        resp_alldata = response.read()
        msg = "The Json post Response all data :",resp_alldata		
        self.logobj.LogMsg(msg,WFA_DEBUG)

        resp_info = response.info()
        msg =  "The Json post Response: ",resp_info		
        self.logobj.LogMsg(msg,WFA_DEBUG)

        #resp_code = response.code()
        #msg = "The Json post Response Code: ",resp_code		
        #self.logobj.LogMsg(msg,WFA_DEBUG)

        #return
        self.logobj.LogMsg("Exit PostJsonFile function",WFA_DEBUG)  
        return 1
