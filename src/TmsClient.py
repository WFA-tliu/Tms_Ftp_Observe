#!/usr/bin/python
###################################################################
# (c) Copyright 2008 Wi-Fi Alliance.  All Rights Reserved
#
# Authors:
# Chandra Sekhar Duba;       Email: cduba@wi-fi.org
####################################################################
# LICENSE
####################################################################
#
#
# License is granted only to Wi-Fi Alliance members and is for use solely
# in testing Wi-Fi products. This license is not transferable or sublicensable,
# and it does not extend to and may not be used with non Wi-Fi applications.
#
# Commercial derivative works or applications that use the Wi-Fi
# scripts generated by this software are NOT AUTHORIZED without
# specific prior written permission from Wi-Fi Alliance
#
# Non-commercial derivative works for your own internal use are
# authorized and are limited by the same restrictions.
#
# Neither the name of the author nor "Wi-Fi Alliance"
# may be used to endorse or promote products that are derived
# from or that use this software without specific prior written
# permission from the author or Wi-Fi Alliance
#
# THIS SOFTWARE IS PROVIDED BY WI-FI ALLIANCE "AS IS" AND ANY
# EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT AND FITNESS
# FOR A  PARTICULAR PURPOSE, ARE DISCLAIMED. IN NO EVENT SHALL WI-FI
# ALLIANCE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# THE COST OF PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###################################################################
# Change History
#       Date        Version          Comment 
#            
#        
###################################################################
#

import logging
import os, sys
import select
import signal
# import commands


# custom modules
from tms.TmsLogger import WfaLogger
from tms.TmsRestClient import MyRestClient
from tms.TmsFunctions import TmsFunctions
from tms.TmsLocalStorage import TmsLocalStorage
from tms.TmsFtpClient import TmsFtpClient
from tms.TmsHeaders import *
from tms.TmsCommon import *
import tms.TmsCommon as TmsCommon


# Version

WFA_TMS_CLIEN_VER="TMS_Client-1.0.0"


# Function to catch a signal
def signal_handler(signal,frame):
    #print "Signal:", signal,"-- Frame:",frame    
    ResetAndClean()    
    sys.exit(0)
    
signal.signal(signal.SIGINT, signal_handler)    





def main():

    #print nargs
    #print sys.argv[0] ,sys.argv[1] ,sys.argv[2]
    nargs = len(sys.argv)
    #print "Number of Arguments:", nargs , "Arguments list", str(sys.argv)
    if nargs == 1:
        sys.exit(0)
    if sys.argv[1] == "-v":
        print(WFA_TMS_CLIEN_VER)
        return
    if nargs <= 2 :
        print('Incorrect Command line Parameters !!! \n\r  \
                        TmsClient [OPTION] \n\r\
                        -d [1/2/3/4] -[status/printConfig/run/group] \n\r \
            USAGE: TmsClient -v --> prints version \n\r \
            -d -->sets the debug info level \n\r \
            -status --> This will give the TmsClient current state \n\r \
            -printConfig  --> This will dump/print the TmsClient configuration details \n\r \
            -run <input test case id>  --> This will run a single test that is supplied as an input \n\r \
            -group <input file> -->  This will run a group of tests that are defined in the group input file \n\r')
        sys.exit("Error Incorrect Parameters")

    #Initialization
    TmsClientInitialize()
	
    #Process and set the debug info level
    if sys.argv[1] == "-d":
        loglevel = int(sys.argv[2])
    else:
        loglevel = 1
    # Instantiate Logger with TmsClient.log file
    logmodule = WfaLogger("TmsClient",loglevel)
    logmodule.LogMsg(" *****    Logger Created Successfully -INFO    *****",WFA_INFO)
    logmodule.LogMsg(" *****    Logger Created Successfully - DEBUG    *****",WFA_DEBUG)
    logmodule.LogMsg(" *****    Logger Created Successfully - WARN    *****",WFA_WARNING)
    logmodule.LogMsg(" *****    Logger Created Successfully - ERROR    *****",WFA_ERROR)

	#####           Create all other objects
    #Instantiate MyRestClient
    tms_restClient = MyRestClient(logmodule)
    #Instantiate TmsLocalStorage
    tms_localStorage = TmsLocalStorage(logmodule)
    #Instantiate TmsFtpClient
    tms_bulkStorage = TmsFtpClient(logmodule)
    #instantiate TmsFunctions
    tms_functions=TmsFunctions(logmodule)
   
    
    if sys.argv[3] == "-status":
        logmodule.LogMsg(" *****   command received - status    *****",WFA_INFO)
        tms_functions.CheckStatus(tms_restClient,tms_localStorage,tms_bulkStorage)
    elif sys.argv[3] == "-printConfig":
        logmodule.LogMsg(" *****   command received - printConfig    *****",WFA_INFO)
        tms_functions.PrintConfig()
    elif sys.argv[3] == "-wfaStaffPost":
        logmodule.LogMsg(" *****   command received - wfaStaffPost    *****",WFA_INFO)
        if nargs > 4:
            if sys.argv[4] == "-force":
                logmodule.LogMsg(" *****   command received - force    *****",WFA_INFO)
                tms_functions.TmsPostOffline(tms_restClient,tms_localStorage,"","force")
            else:
                print("!!! wrong option !!!")
        else:
            tms_functions.TmsPostOffline(tms_restClient,tms_localStorage)

    elif sys.argv[3] == "-run":
        logmodule.LogMsg(" *****   command received - run    *****",WFA_INFO)
        if nargs != 6:
            print("!!!! Test Case ID is Missing !!!!")
            sys.exit(0)
        tms_functions.TmsRunOneTest(tms_restClient,tms_localStorage,sys.argv[4],sys.argv[5],tms_bulkStorage)
            
    elif sys.argv[3] == "-group":
        logmodule.LogMsg(" *****   command received - group    *****",WFA_INFO)
        print("This option is not enabled")

    elif sys.argv[3] == "-wfaStaffManualRun":
        logmodule.LogMsg(" *****   command received from ucc  - wfaStaffManualRun   *****",WFA_INFO)
        if nargs != 6:
            print("!!!! Test Case ID is Missing !!!!")
            sys.exit(0)
        tms_functions.TmsUpdateTestResult(tms_restClient,tms_localStorage,sys.argv[4],sys.argv[5],tms_bulkStorage)
    elif sys.argv[3] == "-wfaStaffManualRun_only_ftp":
        logmodule.LogMsg(" *****   command received from ucc  - wfaStaffManualRun_only_ftp   *****",WFA_INFO)
        if nargs != 6:
            print("!!!! Test Case ID is Missing !!!!")
            sys.exit(0)
        tms_functions.FtpOnlyUpdateTestResult(tms_restClient,tms_localStorage,sys.argv[4],sys.argv[5],tms_bulkStorage)
    elif sys.argv[3] == "-DownloadLogFromftp":                    
        # tms_bulkStorage.GetZipLogFile_to_UCC('/home1/sftpusers/ceteam/CE_TEST_TED', 'C:\\Users\\tliu\Desktop\\git-test\\20230707\\tms_ftp_observe\\download_backup')
        # The first argument is for remote path that we want to download
        # The second argument is for local path to save the remote download stuff
        # tms_bulkStorage.GetZipLogFile_to_UCC('/home1/sftpusers/ceteam/CE_TEST_TED', '\\download_backup')

        # The first remote path is built based on 3 parts
        # 1. /home1/sftpusers/
        # 2. The Tms Ftp user account name "TmsCommon.FtpServerUN"
        # 3. The Tms event name "TmsCommon.TmsEventId"
        remotepath = "/home1/sftpusers/" + TmsCommon.FtpServerUN + "/" + TmsCommon.TmsEventId
        tms_bulkStorage.GetZipLogFile_to_UCC(remotepath, '\\download_backup')
    else:
        logmodule.LogMsg(" *****   Invalid command received     *****",WFA_INFO)
        print("Invalid command received") 
        sys.exit(0)
    
    
    
    msg = "Program Started"
    print(msg)
    logmodule.LogMsg(msg,WFA_INFO)    
    sys.exit(0)
    





if __name__ == "__main__":
    #sys.argv = [sys.argv[0], "-v", "run"]
    #sys.argv = [sys.argv[0], "-d", "2", "-wfaStaffPost"]
    #sys.argv = [sys.argv[0], "-d", "1", "-printConfig"]
    #sys.argv = [sys.argv[0], "-d", "2", "-status"]
    #sys.argv = [sys.argv[0], "-d", "2", "-run","WFD","WFD-5.1.1"]
    main()


